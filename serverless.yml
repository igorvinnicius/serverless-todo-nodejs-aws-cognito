service: serverless-todo-list-nodejs

frameworkVersion: '2'

provider:
  name: aws
  region: eu-west-3
  runtime: nodejs12.x
  stage: ${opt:stage, 'dev'}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: 
        - "arn:aws:dynamodb:eu-west-3:*:table/todos-list"
        - "arn:aws:dynamodb:eu-west-3:*:table/todos-list/index/*"
        - "arn:aws:dynamodb:eu-west-3:*:table/users"
        - "arn:aws:dynamodb:eu-west-3:*:table/users/index/*"
  environment:
    COGNITO_USER_POOL_ID:
      Ref: UserPool
    COGNITO_CLIENT_ID: 
      Ref: UserPoolClient

plugins:
  - serverless-webpack

layers:
  nodeModules:
    path: layers/node_modules

package:
  individually: true 

functions:
  
  signup:
    handler: src/adapters/lambdas/auth/signup/signUp.handler
    package:
      individually: true
    events:
      - http:
          path: signup
          method: post
    layers:
      - { Ref: NodeModulesLambdaLayer }
  
  signin:
    handler: src/adapters/lambdas/auth/signin/signIn.handler
    package:
      individually: true
    events:
      - http:
          path: signin
          method: post
    layers:
      - { Ref: NodeModulesLambdaLayer }
  
  createTodo:
    handler: src/adapters/lambdas/todos/createTodo/createTodo.handler
    events:
      - http:
          path: todos
          method: post          
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
    layers:
      - { Ref: NodeModulesLambdaLayer }
    package:
      individually: true     

  getTodos:
    handler: src/adapters/lambdas/todos/getTodos/getTodos.handler
    events:
      - http:
          path: todos
          method: get
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
    layers:
      - { Ref: NodeModulesLambdaLayer }
    package:
      individually: true

  getTodo:
    handler: src/adapters/lambdas/todos/getTodo/getTodo.handler
    events:
      - http:
          path: todos/{id}
          method: get
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
    layers:
      - { Ref: NodeModulesLambdaLayer }
    package:
      individually: true

  updateTodo:
    handler: src/adapters/lambdas/todos/updateTodo/updateTodo.handler
    events:
      - http:
          path: todos
          method: put
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
    layers:
      - { Ref: NodeModulesLambdaLayer }
    package:
      individually: true

  deleteTodo:
    handler: src/adapters/lambdas/todos/deleteTodo/deleteTodo.handler
    events:
      - http:
          path: todos/{id}
          method: delete
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
    layers:
      - { Ref: NodeModulesLambdaLayer }
    package:
      individually: true
    
resources:
  Resources:

    UserPool:
      Type: 'AWS::Cognito::UserPool'
      Properties:
        UserPoolName: '${self:service}-${self:provider.stage}-user-pool'
        UsernameAttributes:
          - 'email'
        AutoVerifiedAttributes:
          - 'email'
        VerificationMessageTemplate:
          DefaultEmailOption: CONFIRM_WITH_LINK
    
    UserPoolClient:
      Type: 'AWS::Cognito::UserPoolClient'
      Properties:
        ClientName: '${self:service}-${self:provider.stage}-user-pool-client'
        UserPoolId: 
          Ref: UserPool
        ExplicitAuthFlows: 
            - 'ALLOW_USER_PASSWORD_AUTH'
            - 'ALLOW_REFRESH_TOKEN_AUTH'
        PreventUserExistenceErrors: 'ENABLED'
        SupportedIdentityProviders:
          - 'COGNITO'
    
    UserPoolDomain:
      Type: 'AWS::Cognito::UserPoolDomain'
      Properties:
        UserPoolId:
          Ref: UserPool
        Domain: '${self:service}-${self:provider.stage}'
    
    ApiGatewayAuthorizer:
        DependsOn:
          - ApiGatewayRestApi
        Type: AWS::ApiGateway::Authorizer
        Properties:
          Name: EndpointAuthorizer
          IdentitySource: method.request.header.Authorization
          RestApiId:
            Ref: ApiGatewayRestApi
          Type: COGNITO_USER_POOLS
          ProviderARNs:
            - Fn::GetAtt: [UserPool, Arn]

    TodosDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
          -
            AttributeName: name
            AttributeType: S          
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: todos-list
        GlobalSecondaryIndexes:
          - 
            IndexName: "todos_name_gsi"
            KeySchema: 
              - 
                AttributeName: "name"
                KeyType: "HASH"           
            Projection: 
              NonKeyAttributes: 
                - "id"
                - "name"
                - "created_at"
                - "updated_at"
              ProjectionType: "INCLUDE"
            ProvisionedThroughput: 
              ReadCapacityUnits: "1"
              WriteCapacityUnits: "1"

    UsersDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
          -
            AttributeName: email
            AttributeType: S          
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH            
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: users
        GlobalSecondaryIndexes:
          - 
            IndexName: "users_email_gsi"
            KeySchema: 
              - 
                AttributeName: "email"
                KeyType: "HASH"           
            Projection: 
              NonKeyAttributes: 
                - "id"
                - "name"
                - "created_at"
                - "updated_at"
              ProjectionType: "INCLUDE"
            ProvisionedThroughput: 
              ReadCapacityUnits: "1"
              WriteCapacityUnits: "1"

